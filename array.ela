
Array :: struct!<T> {
  data: T[1024],
  length: u32,
}

impl!<T> Array!<T> {
  push :: fn(*mut self, t: T) {
    self.data[self.length] = t;
    self.length++;
  }

  remove :: fn(*mut self, idx: u64) -> T {
    removed_value := self.data[idx];
    for i in idx..self.length - 1 {
      self.data[i] = self.data[i + 1];
    }
    self.length--;
    return removed_value;
  }
}

impl!<T> Subscript!<T> for Array!<T> {
  subscript :: fn(*const self, idx: u64) -> *const T {
    return &const self.data[idx];
  }
  
  subscript_mut :: fn(*mut self, idx: u64) -> *mut T {
    return &mut self.data[idx];
  }
}

impl!<T> Iterable!<T> for Array!<T> {
  iter :: fn(*const self) -> Iter!<T> {
    return .{
      ptr: &mut self.data[0], 
      end: &const self.data[self.length]
    }
  }
  iter_mut :: fn(*mut self) -> IterMut!<*mut T> {
    return .{
      ptr: &mut self.data[0], 
      end: &const self.data[self.length]
    }
  }
}