import physics::*;

#test test_body_no_collide :: fn() {
  mut a := Body.{
    transform: .{
      translation: Vector3::zero(),
      scale: Vector3::one(),
    }
  }
  b := Body.{
    transform: .{
      translation: Vector3::new(10.0, 10.0, 10.0),
      scale: Vector3::one(),
    }
    kind: BodyKind::Rigid
  }
  collision := a.resolve_collision(&const b);
  assert("Bodies should not collide", collision.hit == false);
}

#test test_body_collide_with_scale :: fn() {
  mut a := Body.{
    transform: .{
      translation: Vector3::zero(),
      scale: Vector3::new(2.0, 2.0, 2.0),
    }
    kind: BodyKind::Rigid,
  }

  b := Body.{
    transform: .{
      translation: Vector3::new(1.0, 1.0, 1.0),
      scale: Vector3::one(),
    }
  }

  collision := a.resolve_collision(&const b);

  assert("Bodies should collide with scale", 
      collision.hit == true && (
        collision.penetration.x != 0.0 ||
        collision.penetration.y != 0.0 ||
        collision.penetration.z != 0.0
      )
  );
}

#test test_body_collide_with_rotation :: fn() {
  mut a := Body.{
    transform: .{
      translation: Vector3::zero(),
      rotation: .{x: 10, y: 20, z: 30},
      scale: Vector3::one(),
    }
  }
  b := Body.{
    transform: .{
      translation: Vector3::new(0.5, 0.5, 0.5),
      rotation: .{},
      scale: Vector3::one(),
    }
    kind: BodyKind::Rigid
  }

  collision := a.resolve_collision(&const b);
  assert("Bodies should collide with rotation", collision.hit == true && (collision.penetration.x != 0.0 || collision.penetration.y != 0.0 || collision.penetration.z != 0.0));
}

#test test_body_no_collide_with_rotation :: fn() {
  mut a := Body.{
    transform: .{
      translation: Vector3::zero(),
      rotation: Quaternion::from_euler(0.0, 0.0, 0.0),
      scale: Vector3::one(),
    }
  }
  b := Body.{
    transform: .{
      translation: Vector3::new(10.0, 10.0, 10.0),
      rotation: Quaternion::from_euler(0.0, 0.0, 0.0),
      scale: Vector3::one(),
    }
  }
  collision := a.resolve_collision(&const b);
  assert("Bodies should not collide with rotation", collision.hit == false);
}
