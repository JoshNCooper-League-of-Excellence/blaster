import fmt::*;
import engine::*;

load_scenes :: fn() -> Scene[] {
  mut scenes: Scene[];
  #include "scenes/0.ela";
  #include "scenes/1.ela";
  return scenes;
}

main :: fn() {
  mut engine: Engine;

  engine.init("Blaster"); {
    DisableCursor();
  }

  engine.background_color = BLACK;

  engine.update = fn(engine: *mut Engine) {
    if IsKeyPressed(KeyboardKey::KEY_R) {
      engine.load_scene(engine.scene);
      return;
    }

    UpdateCamera(&const engine.scene.camera, CameraMode::CAMERA_FIRST_PERSON);

    DrawGrid(1000, 1.0);

    for object in engine.scene.game_objects {
      transform := &mut object.body.transform;

      rotation := fmod(GetTime() / 2.0, 360.0) as f32;
      transform.rotation = Quaternion::from_euler(
        cos(rotation) as f32,
        rotation * 2,
        sin(rotation) as f32,
      );

      mut rot_axis: Vector3;
      mut rot_angle: f32;

      QuaternionToAxisAngle(
        transform.rotation,
        &mut rot_axis,
        &mut rot_angle
      );

      rot_angle = rot_angle * (180.0 / 3.141592653589793);

      DrawModelEx(
        engine.scene.models[object.model],
        transform.translation,
        rot_axis, rot_angle,
        transform.scale / 2, WHITE,
      );

      object.body.draw();
    }
  };

  engine.physics = fn(engine: *mut Engine) {
    for object in engine.scene.game_objects {
      object.body.contacts.clear();
    }

    for object in engine.scene.game_objects {
      for other in engine.scene.game_objects {
        object.body.resolve_collision(&mut other.body);
        pos := &mut object.body.transform.translation;
        scale := object.body.transform.scale;
        if pos.y >= scale.y / 2 {
          pos.y -= 0.01;
        } else {
          pos.y = scale.y / 2;
        }
      }
    }
  };

  rlSetClipPlanes(0.01, 20);
  scenes := load_scenes();
  engine.load_scene(&mut scenes[0]);
  engine.run();
}
