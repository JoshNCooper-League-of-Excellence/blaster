import raylib::*;
import array::*;
import physics::*;

Metadata :: struct {
  // this will be used for ansillary 
  // informations like interactions, whatever, and such.
}

GameObject :: struct {
  transform: Transform,

  model:    u32,

  // this is a pointer because it very well may be shared?
  // textures, colors, idk.
  metadata: *mut Metadata,
  
  body:     Body,
}

impl GameObject {
  rotate :: fn(*mut self, rotation: Vector4) {
    self.transform.rotation = Vector4Add(self.transform.rotation, rotation);
  }

  scale :: fn(*mut self, factor: Vector3) {
    self.transform.scale = Vector3Multiply(self.transform.scale, factor);
  }

  translate :: fn(*mut self, translation: Vector3) {
    self.transform.translation = Vector3Add(self.transform.translation, translation);
  }
}

Scene :: struct {
  game_objects:  List!<*mut GameObject>,
  load:   fn *(*mut Scene),
  unload: fn *(*mut Scene),
  models: Array!<Model>,
  camera: Camera3D
}

impl Scene {
  load_model :: fn(*mut self, path: str) -> u32 {
    self.models.push(LoadModel(path.data));
    return self.models.length -1;
  }
  add_object :: fn(*mut self, go: GameObject) {
    self.game_objects.push(new(go));
  }
}

Engine :: struct {
  scene: *mut Scene,
  update: fn*(*mut Engine),
  physics: fn*(*mut Engine),
}

impl Engine {

  load_scene :: fn(*mut self, scene: *mut Scene) {
    if self.scene && self.scene.unload {
      self.scene.unload(self.scene);
    }
    self.scene = scene;
    if scene.load {
      scene.load(self.scene);
    }
  }

  init :: fn(*mut self, title: str) {
    // Silence the raylib console output
    SetTraceLogLevel(TraceLogLevel::LOG_NONE);
    InitWindow(800, 600, title.data);
    SetConfigFlags(ConfigFlags::FLAG_WINDOW_RESIZABLE);
    SetTargetFPS(60);
  }

  run :: fn(*mut self) {

    while !WindowShouldClose() {
      BeginDrawing();
      ClearBackground(WHITE);
      BeginMode3D(self.scene.camera);
        if self.physics then
          self.physics(self);
        
        if self.update then
          self.update(self);
      EndMode3D();
      EndDrawing();
    }
  }
}
