
import fmt::*;
import engine::*;

main :: fn() {
  mut engine: Engine;
  mut scene: Scene;

  engine.init("Blaster"); {
    DisableCursor();
  }

  engine.background_color = WHITE;

  engine.update = fn(engine: *mut Engine) {
    if IsKeyPressed(KeyboardKey::KEY_R) {
      engine.load_scene(engine.scene);
      return;
    }

    UpdateCamera(&const engine.scene.camera, CameraMode::CAMERA_FIRST_PERSON);
    
    for object in engine.scene.game_objects {
      transform := &mut object.body.transform;
      transform.rotation = transform.rotation + Quaternion::from_euler(0.1, 0.01, 0);

      rot_axis  := Vector3::normalize(Vector3::new(transform.rotation.x, transform.rotation.y, transform.rotation.z));
      rot_angle := transform.rotation.w;

      model := engine.scene.models[object.model];
      offset := (Vector3::one() * 0);
      
      DrawModelEx(model, 
        transform.translation + offset, 
        rot_axis, 
        rot_angle, 
        transform.scale, 
        BLACK.with_alpha(50)
      );

      object.body.draw();
    }
  };
  
  engine.physics = fn(engine: *mut Engine) {
  };

  scene.load = fn(scene: *mut Scene) {
    scene.camera.target = .{x: 0, y: 0, z: 0};
    scene.camera.position = .{x: 0, y: 2, z: 5};
    scene.camera.up = .{x: 0, y: 1, z: 0};
    scene.camera.fovy = 60.0;

    scene.add_object(.{
      body: .{
        transform: .{
          scale: Vector3::one(),
        },
        kind: BodyKind::Rigid,
      },
      model: scene.load_model("assets/cuba.obj"),
    });
    
  };

  scene.unload = fn(scene: *mut Scene) {
    for object in scene.game_objects {
      free(object);
    }

    scene.game_objects.clear();

    for model in scene.models {
      UnloadModel(model);
    }
    scene.models.length = 0;
  };

  engine.load_scene(&mut scene);
  engine.run();
}
