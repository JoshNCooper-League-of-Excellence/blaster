import fmt::*;
import engine::*;

load_scenes :: fn() -> Scene[] {
  mut scenes: Scene[];
  #include "scenes/0.ela";
  #include "scenes/1.ela";
  return scenes;
}

main :: fn() {
  mut engine: Engine;

  engine.init("Blaster"); {
    DisableCursor();
  }

  engine.background_color = BLACK;

  engine.update = fn(engine: *mut Engine) {
    if IsKeyPressed(KeyboardKey::KEY_R) {
      engine.load_scene(engine.scene);
      return;
    }

    UpdateCamera(&const engine.scene.camera, CameraMode::CAMERA_FIRST_PERSON);
    
    for object in engine.scene.game_objects {
      transform := &mut object.body.transform;
      transform.rotation = Quaternion::from_euler(0, 45.0, 0);

      mut rot_axis: Vector3;
      mut rot_angle: f32;

      QuaternionToAxisAngle(
        transform.rotation, 
        &mut rot_axis, 
        &mut rot_angle
      );

      DrawModelEx(
        engine.scene.models[object.model],
        transform.translation, 
        rot_axis, rot_angle, 
        transform.scale, WHITE,
      );
      
      object.body.draw();
    }
  };
  
  engine.physics = fn(engine: *mut Engine) {
    for object in engine.scene.game_objects {
      object.body.contacts.clear();
    }

    for object in engine.scene.game_objects {
      for other in engine.scene.game_objects {
        penetration, hit := object.body.resolve_collision(&mut other.body);

        if hit {
          // translation := &mut object.body.transform.translation;
          // *translation = translation.add(penetration / 1000.0);
        }
      }
    }
  };

  scenes := load_scenes();
  engine.load_scene(&mut scenes[0]);
  engine.run();
}
