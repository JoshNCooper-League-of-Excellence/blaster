import raylib::*;

import fmt::*;

BodyKind :: enum {
  Static,
  Rigid,
}

Body :: struct {
  kind: BodyKind,
  transform: Transform,
  contacts: List!<*const Body>,
}

Collision :: struct {
  penetration: Vector3,
  hit: bool,
}

impl Transform {
  get_corners :: fn(*const self) -> Vector3[] {

    mut corners := List!<Vector3>::init(.[
      .{ x: -self.scale.x / 2, y: -self.scale.y / 2, z: -self.scale.z / 2 },
      .{ x:  self.scale.x / 2, y: -self.scale.y / 2, z: -self.scale.z / 2 },
      .{ x:  self.scale.x / 2, y:  self.scale.y / 2, z: -self.scale.z / 2 },
      .{ x: -self.scale.x / 2, y:  self.scale.y / 2, z: -self.scale.z / 2 },
    
      .{ x: -self.scale.x / 2, y: -self.scale.y / 2, z:  self.scale.z / 2 },
      .{ x:  self.scale.x / 2, y: -self.scale.y / 2, z:  self.scale.z / 2 },
      .{ x:  self.scale.x / 2, y:  self.scale.y / 2, z:  self.scale.z / 2 },
      .{ x: -self.scale.x / 2, y:  self.scale.y / 2, z:  self.scale.z / 2 }
    ]);

    for corner in corners.iter_mut() {
      *corner = 
        Vector3RotateByQuaternion(*corner, self.rotation) 
        + self.translation;
    }

    return corners;
  }
}

impl Body {
  draw :: fn(*const self) {
    mut corners := self.transform.get_corners();
    defer corners.deinit();

    color := switch self.contacts.is_empty() {
      true => GREEN,
      false => RED,
    };

    for i in 0..4 {
      DrawLine3D(corners[i], corners[(i + 1) % 4], color);
      DrawLine3D(corners[i + 4], corners[((i + 1) % 4) + 4], color);
      DrawLine3D(corners[i], corners[i + 4], color);
    }
  }
}

impl Body {
  resolve_collision :: fn(*mut self, other: *mut Body) {
    if self.kind == other.kind && other.kind == BodyKind::Static {
      return;
    }

    mut self_corners := self.transform.get_corners();
    mut other_corners := other.transform.get_corners();

    defer {
      self_corners.deinit();
      other_corners.deinit();
    }

    mut self_min := Vector3.{x: self_corners[0].x, y: self_corners[0].y, z: self_corners[0].z};
    mut self_max := Vector3.{x: self_corners[0].x, y: self_corners[0].y, z: self_corners[0].z};

    for corner in self_corners {
      self_min.x = min(self_min.x, corner.x);
      self_min.y = min(self_min.y, corner.y);
      self_min.z = min(self_min.z, corner.z);

      self_max.x = max(self_max.x, corner.x);
      self_max.y = max(self_max.y, corner.y);
      self_max.z = max(self_max.z, corner.z);
    }

    mut other_min := Vector3.{x: other_corners[0].x, y: other_corners[0].y, z: other_corners[0].z};
    mut other_max := Vector3.{x: other_corners[0].x, y: other_corners[0].y, z: other_corners[0].z};

    for corner in other_corners {
      other_min.x = min(other_min.x, corner.x);
      other_min.y = min(other_min.y, corner.y);
      other_min.z = min(other_min.z, corner.z);

      other_max.x = max(other_max.x, corner.x);
      other_max.y = max(other_max.y, corner.y);
      other_max.z = max(other_max.z, corner.z);
    }

    if self_max.x < other_min.x || self_min.x > other_max.x ||
      self_max.y < other_min.y || self_min.y > other_max.y ||
      self_max.z < other_min.z || self_min.z > other_max.z {
      return;
    }

    penetration := Vector3.{
      x: min(self_max.x - other_min.x, other_max.x - self_min.x),
      y: min(self_max.y - other_min.y, other_max.y - self_min.y),
      z: min(self_max.z - other_min.z, other_max.z - self_min.z),
    };

    mut translation := &mut self.transform.translation;
    *translation = *translation + penetration / 2.0;

    mut other_translation := &mut other.transform.translation;
    *other_translation = *other_translation - penetration / 2.0;

    self.contacts.push(other);
    other.contacts.push(self);
  }
}